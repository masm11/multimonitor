新しい data source の作り方

class と instance

  data source は MccDataSource を継承して作成する。

  例えば /proc/loadavg には 1min, 5min, 15min の値がまとめて存在し、
  これらの値を取得するために 3回 fopen() するのを避けるため、まとめて
  値を取得して保持しておき、必要に応じてそれらの値を使う。

  値の取得は、グラフにどれを表示するかとは無関係に、必ず行う。グラフに
  全く表示してないこともあるので、値の取得は instance とは無関係に行い、
  取得した値は class 構造体に格納しておく。

  1min, 5min, 15min のどれが必要か、などといった情報は instance に持っ
  ておき、格納しておいた値を使って、表示用の値を作る。

MccDataSource, MccDataSourceClass

  MccDataSourceClass

    label:	この data source の名前。プロパティやグラフに表示される。

    sublabels:	"1min", "5min", "15min" とか。プロパティに表示される。
		NULL-terminated な配列。

    tick_per_read:
		何 tick ごとに値を取得するか。1tick = 250ms

    tick_for_read:
		tick_per_read と比較するためのカウンタ。
		触らないこと。

    has_new_data:
		値を取得したかどうか。
		触らないこと。

    read:	値を取得する関数のポインタ。class_init 内で設定すること。

    set_subidx:	MccDataSource 作成時、subidx を設定した後に呼ばれる関数の
		ポインタ。class_init 内で設定すること。

    get:	表示用に値を取り出す関数へのポインタ。class_init 内で設定
		すること。

  MccDataSource

    subidx:	1min, 5min, 15min とかの種類の番号。

    min, max:	値の最小値と最大値。
		load avg のように、上限がなくて横線を描いていくタイプの場合、
		1本めの横線の値を max に設定する。

    nvalues:	値の個数。その個数だけグラフに積み上げられる。
		memory usage の場合、used, buffer, cache で 3つ。

    nfg:	前景色の個数
		memory usage の場合は、メモリの用途で色を変えて 3つ。
		battery の場合は、値は 1個だが、充電中かどうかで色を
		変えるので、2つ。

    fg_labels:	各前景色の名前。NULL-terminator 不要。

    default_fg:	各前景色のデフォルト値。

    nbg, bg_labels, default_bg:
		同様に背景色。

    dynamic_scaling:
		load avg のように、上限がなくて横線を描いていくタイプの場合は
		TRUE。そうでない場合は FALSE。

    add_on_tick:
		tick_per_read >= 2 の場合に、値を取得しなくてもグラフを
		同じ値で進めるか、値を取得しなかったらグラフを進めないか。
		TRUE の場合は進める。

    sublabel:	"1min" とか。グラフに表示される。

  ポインタなものは、全てメモリを確保すること。グラフ削除時に
  MccDataSource が g_free() や g_object_unref() などで解放するので、
  static 領域だと正常に動作しない。MccDataSource の sublabel は
  MccDataSourceClass の sublabels の 1つと同じになるだろうが、メモリを
  別に確保すること。

  MccDataSource にあるほとんどのメンバは、MccDataSourceClass にあれば良
  いように思えるが、subidx によって変わるかもしれないと考えて、こちらに
  入れてある。instance の init 時には、subidx がまだ決定しておらず、こ
  れらを初期化できないので、初期化は set_subidx にて行う。

MccValue

  グラフ表示用の値を表す。値だけでなく、前景色の番号なども保持する。

  主に、MccDataSource の get が呼ばれた時に、このオブジェクトを確保し、
  値を設定して返す。

  - 確保
    mcc_value_new() を使う。
    オブジェクトは再利用されているかもしれないが、気にする必要はない。

  - 値のセット
    mcc_value_set_value() を使う。
    グラフには複数の値を積み上げて表示できるので、複数の値をセットできる。
    何個めの値かを idx に指定し、その値を val に指定する。

  - 前景色のセット
    mcc_value_set_foreground() を使う。
    それぞれの値をどの色で描画するかを指定する。色の指定は 0 〜 nfg-1
    となる。デフォルトは 0。

  - 背景色のセット
    mcc_value_set_background() を使う。
    色の指定は 0 〜 nbg-1。デフォルトは 0。

  - 破棄
    たぶん必要になることはないだろうが、g_object_{ref,unref}() の代わり
    に mcc_value_{ref,unref}() を使うこと。


仕上げ

  新しい class を作ったら、main.c に追記する。

  ↓先頭のこの辺に追加。

    #include "mccsrcloadavg.h"
    #include "mccsrcmemory.h"
    #include "mccsrcdiskio.h"

  ↓ plugin_start() の、この辺に追加。
     プロパティの New にはこの順に表示される。

	MCC_TYPE_SRC_LOAD_AVG,
	MCC_TYPE_SRC_MEMORY,
	MCC_TYPE_SRC_DISK_IO,
